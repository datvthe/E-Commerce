-- ================================================
-- üîß C·∫¨P NH·∫¨T B·∫¢NG ORDERS CHO DIGITAL GOODS
-- ================================================
-- File n√†y S·∫º:
-- 1. Th√™m c√°c c·ªôt c√≤n thi·∫øu v√†o b·∫£ng orders
-- 2. T·∫°o c√°c b·∫£ng m·ªõi c·∫ßn thi·∫øt
-- 3. KH√îNG x√≥a d·ªØ li·ªáu hi·ªán t·∫°i
-- ================================================

USE gicungco;

-- ================================================
-- B∆Ø·ªöC 1: KI·ªÇM TRA V√Ä TH√äM C·ªòT V√ÄO B·∫¢NG ORDERS
-- ================================================

-- Th√™m c·ªôt order_number (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'order_number';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN order_number VARCHAR(50) UNIQUE AFTER order_id',
    'SELECT "Column order_number already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt product_id (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'product_id';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN product_id BIGINT AFTER seller_id',
    'SELECT "Column product_id already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt quantity (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'quantity';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN quantity INT DEFAULT 1 AFTER product_id',
    'SELECT "Column quantity already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt unit_price (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'unit_price';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN unit_price DECIMAL(15,2) AFTER quantity',
    'SELECT "Column unit_price already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt payment_method (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'payment_method';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN payment_method VARCHAR(50) DEFAULT ''WALLET'' AFTER total_amount',
    'SELECT "Column payment_method already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt payment_status (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'payment_status';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN payment_status VARCHAR(20) DEFAULT ''PENDING'' AFTER payment_method',
    'SELECT "Column payment_status already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt order_status (n·∫øu ch∆∞a c√≥, kh√°c v·ªõi status)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'order_status';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN order_status VARCHAR(20) DEFAULT ''PENDING'' AFTER payment_status',
    'SELECT "Column order_status already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt delivery_status (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'delivery_status';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN delivery_status VARCHAR(20) DEFAULT ''INSTANT'' AFTER order_status',
    'SELECT "Column delivery_status already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt transaction_id (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'transaction_id';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN transaction_id VARCHAR(100) AFTER delivery_status',
    'SELECT "Column transaction_id already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt queue_status (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'queue_status';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN queue_status VARCHAR(20) DEFAULT ''WAITING'' AFTER transaction_id',
    'SELECT "Column queue_status already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Th√™m c·ªôt processed_at (n·∫øu ch∆∞a c√≥)
SET @col_exists = 0;
SELECT COUNT(*) INTO @col_exists 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND COLUMN_NAME = 'processed_at';

SET @sql = IF(@col_exists = 0,
    'ALTER TABLE orders ADD COLUMN processed_at TIMESTAMP NULL AFTER queue_status',
    'SELECT "Column processed_at already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- ================================================
-- B∆Ø·ªöC 2: T·∫†O C√ÅC B·∫¢NG M·ªöI
-- ================================================

-- 2.1. B·∫¢NG DIGITAL_PRODUCTS (KHO T√ÄI NGUY√äN S·ªê)
CREATE TABLE IF NOT EXISTS `digital_products` (
  `digital_id` BIGINT NOT NULL AUTO_INCREMENT,
  `product_id` BIGINT NOT NULL COMMENT 'S·∫£n ph·∫©m g·ªëc',
  `code` VARCHAR(255) NOT NULL COMMENT 'M√£ th·∫ª/Serial/Username',
  `password` VARCHAR(255) COMMENT 'M·∫≠t kh·∫©u (n·∫øu l√† t√†i kho·∫£n)',
  `serial` VARCHAR(255) COMMENT 'Serial (n·∫øu l√† th·∫ª c√†o)',
  `additional_info` TEXT COMMENT 'Th√¥ng tin th√™m (JSON)',
  `status` VARCHAR(20) DEFAULT 'AVAILABLE' COMMENT 'AVAILABLE, SOLD, EXPIRED, INVALID',
  `sold_to_user_id` BIGINT COMMENT 'User ƒë√£ mua',
  `sold_in_order_id` BIGINT COMMENT 'Order ƒë√£ b√°n',
  `sold_at` TIMESTAMP NULL,
  `expires_at` TIMESTAMP NULL COMMENT 'Ng√†y h·∫øt h·∫°n (n·∫øu c√≥)',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`digital_id`),
  UNIQUE KEY `unique_code_per_product` (`product_id`, `code`),
  INDEX `idx_digital_product` (`product_id`),
  INDEX `idx_digital_status` (`status`),
  INDEX `idx_digital_user` (`sold_to_user_id`),
  INDEX `idx_digital_order` (`sold_in_order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- 2.2. B·∫¢NG ORDER_DIGITAL_ITEMS (S·∫¢N PH·∫®M S·ªê ƒê√É GIAO)
CREATE TABLE IF NOT EXISTS `order_digital_items` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `order_id` BIGINT NOT NULL,
  `digital_id` BIGINT NOT NULL,
  `delivered_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_digital_per_order` (`order_id`, `digital_id`),
  INDEX `idx_order_digital` (`order_id`),
  INDEX `idx_digital_item` (`digital_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- 2.3. B·∫¢NG ORDER_QUEUE (H√ÄNG ƒê·ª¢I X·ª¨ L√ù)
CREATE TABLE IF NOT EXISTS `order_queue` (
  `queue_id` BIGINT NOT NULL AUTO_INCREMENT,
  `order_id` BIGINT NOT NULL,
  `priority` INT DEFAULT 0 COMMENT 'ƒê·ªô ∆∞u ti√™n',
  `status` VARCHAR(20) DEFAULT 'WAITING' COMMENT 'WAITING, PROCESSING, COMPLETED, FAILED',
  `attempts` INT DEFAULT 0 COMMENT 'S·ªë l·∫ßn th·ª≠ x·ª≠ l√Ω',
  `error_message` TEXT,
  `processor_id` VARCHAR(100) COMMENT 'ID c·ªßa worker',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `started_at` TIMESTAMP NULL,
  `completed_at` TIMESTAMP NULL,
  PRIMARY KEY (`queue_id`),
  UNIQUE KEY `unique_order_queue` (`order_id`),
  INDEX `idx_queue_status` (`status`),
  INDEX `idx_queue_priority` (`priority` DESC),
  INDEX `idx_queue_created` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- 2.4. B·∫¢NG ORDER_HISTORY (L·ªäCH S·ª¨ THAY ƒê·ªîI)
CREATE TABLE IF NOT EXISTS `order_history` (
  `history_id` BIGINT NOT NULL AUTO_INCREMENT,
  `order_id` BIGINT NOT NULL,
  `old_status` VARCHAR(20),
  `new_status` VARCHAR(20),
  `changed_by` BIGINT COMMENT 'User/Admin thay ƒë·ªïi',
  `note` TEXT,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`history_id`),
  INDEX `idx_history_order` (`order_id`),
  INDEX `idx_history_created` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ================================================
-- B∆Ø·ªöC 3: T·∫†O INDEX CHO B·∫¢NG ORDERS (T·ªêI ∆ØU)
-- ================================================

-- Index cho order_number
SET @index_exists = 0;
SELECT COUNT(*) INTO @index_exists 
FROM INFORMATION_SCHEMA.STATISTICS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND INDEX_NAME = 'idx_order_number';

SET @sql = IF(@index_exists = 0,
    'CREATE INDEX idx_order_number ON orders(order_number)',
    'SELECT "Index idx_order_number already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Index cho product_id
SET @index_exists = 0;
SELECT COUNT(*) INTO @index_exists 
FROM INFORMATION_SCHEMA.STATISTICS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND INDEX_NAME = 'idx_order_product';

SET @sql = IF(@index_exists = 0,
    'CREATE INDEX idx_order_product ON orders(product_id)',
    'SELECT "Index idx_order_product already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Index cho queue_status
SET @index_exists = 0;
SELECT COUNT(*) INTO @index_exists 
FROM INFORMATION_SCHEMA.STATISTICS 
WHERE TABLE_SCHEMA = 'gicungco' 
  AND TABLE_NAME = 'orders' 
  AND INDEX_NAME = 'idx_order_queue';

SET @sql = IF(@index_exists = 0,
    'CREATE INDEX idx_order_queue ON orders(queue_status, processed_at)',
    'SELECT "Index idx_order_queue already exists" AS message');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- ================================================
-- B∆Ø·ªöC 4: INSERT SAMPLE DIGITAL PRODUCTS
-- ================================================

-- Sample: Th·∫ª c√†o Viettel 100K (product_id = 1)
-- Ch·ªâ insert n·∫øu ch∆∞a c√≥
INSERT INTO `digital_products` 
(product_id, code, serial, status, expires_at)
SELECT 1, '1234567890123', '9876543210', 'AVAILABLE', DATE_ADD(NOW(), INTERVAL 365 DAY)
WHERE NOT EXISTS (SELECT 1 FROM digital_products WHERE code = '1234567890123');

INSERT INTO `digital_products` 
(product_id, code, serial, status, expires_at)
SELECT 1, '2345678901234', '8765432109', 'AVAILABLE', DATE_ADD(NOW(), INTERVAL 365 DAY)
WHERE NOT EXISTS (SELECT 1 FROM digital_products WHERE code = '2345678901234');

INSERT INTO `digital_products` 
(product_id, code, serial, status, expires_at)
SELECT 1, '3456789012345', '7654321098', 'AVAILABLE', DATE_ADD(NOW(), INTERVAL 365 DAY)
WHERE NOT EXISTS (SELECT 1 FROM digital_products WHERE code = '3456789012345');

INSERT INTO `digital_products` 
(product_id, code, serial, status, expires_at)
SELECT 1, '4567890123456', '6543210987', 'AVAILABLE', DATE_ADD(NOW(), INTERVAL 365 DAY)
WHERE NOT EXISTS (SELECT 1 FROM digital_products WHERE code = '4567890123456');

INSERT INTO `digital_products` 
(product_id, code, serial, status, expires_at)
SELECT 1, '5678901234567', '5432109876', 'AVAILABLE', DATE_ADD(NOW(), INTERVAL 365 DAY)
WHERE NOT EXISTS (SELECT 1 FROM digital_products WHERE code = '5678901234567');

-- ================================================
-- B∆Ø·ªöC 5: KI·ªÇM TRA K·∫æT QU·∫¢
-- ================================================

-- Xem c·∫•u tr√∫c b·∫£ng orders sau khi update
SELECT 
    COLUMN_NAME AS 'Cot',
    DATA_TYPE AS 'Kieu_Du_Lieu',
    CHARACTER_MAXIMUM_LENGTH AS 'Do_Dai',
    IS_NULLABLE AS 'Cho_Phep_NULL',
    COLUMN_KEY AS 'Khoa',
    COLUMN_DEFAULT AS 'Gia_Tri_Mac_Dinh'
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'gicungco'
  AND TABLE_NAME = 'orders'
ORDER BY ORDINAL_POSITION;

-- Xem c√°c b·∫£ng digital goods ƒë√£ t·∫°o
SELECT 
    TABLE_NAME AS 'Bang',
    TABLE_ROWS AS 'So_Dong',
    CREATE_TIME AS 'Ngay_Tao'
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'gicungco'
  AND TABLE_NAME IN (
      'digital_products',
      'order_digital_items',
      'order_queue',
      'order_history'
  )
ORDER BY TABLE_NAME;

-- Xem digital products c√≥ s·∫µn
SELECT 
    dp.digital_id,
    dp.product_id,
    p.name AS product_name,
    dp.code,
    dp.serial,
    dp.status,
    dp.expires_at
FROM digital_products dp
LEFT JOIN products p ON dp.product_id = p.product_id
WHERE dp.status = 'AVAILABLE'
ORDER BY dp.product_id, dp.digital_id;

-- ================================================
-- ‚úÖ HO√ÄN T·∫§T C·∫¨P NH·∫¨T!
-- ================================================
-- 
-- ƒê√É TH·ª∞C HI·ªÜN:
-- 1. ‚úÖ Th√™m 9 c·ªôt m·ªõi v√†o b·∫£ng orders
-- 2. ‚úÖ T·∫°o 4 b·∫£ng m·ªõi (digital_products, order_digital_items, order_queue, order_history)
-- 3. ‚úÖ T·∫°o indexes ƒë·ªÉ t·ªëi ∆∞u
-- 4. ‚úÖ Insert 5 sample digital products
--
-- B√ÇY GI·ªú B·∫†N C√ì TH·ªÇ:
-- - Xem c·∫•u tr√∫c b·∫£ng orders m·ªõi
-- - Xem danh s√°ch digital products
-- - B·∫Øt ƒë·∫ßu implement code Java
--
-- ================================================

