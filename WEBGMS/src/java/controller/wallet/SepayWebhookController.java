package controller.wallet;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import dao.WalletDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;

/**
 * ‚úÖ Controller nh·∫≠n Webhook t·ª´ SePay khi c√≥ giao d·ªãch v√†o t√†i kho·∫£n - Khi SePay
 * g·ªçi ƒë·∫øn URL n√†y (POST) - Server s·∫Ω parse JSON, ki·ªÉm tra m√¥ t·∫£ (VD: TOPUP-5) -
 * T·ª± ƒë·ªông c·ªông ti·ªÅn + l∆∞u log giao d·ªãch
 */
@WebServlet("/sepay/webhook")
public class SepayWebhookController extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // ƒê·∫∑t type tr·∫£ v·ªÅ l√† JSON
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        // ƒê·ªçc d·ªØ li·ªáu JSON m√† SePay g·ª≠i
        StringBuilder sb = new StringBuilder();
        try (BufferedReader reader = request.getReader()) {
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
        }

        String json = sb.toString();
        System.out.println("üì© Webhook nh·∫≠n ƒë∆∞·ª£c t·ª´ SePay: " + json);

        try {
            // Parse JSON
            Gson gson = new Gson();
            JsonObject data = gson.fromJson(json, JsonObject.class);

            // ‚úÖ H·ªó tr·ª£ c·∫£ format test v√† SePay real
            // Description: ∆∞u ti√™n "content" (SePay real), fallback "description"
            String description = data.has("content") 
                    ? data.get("content").getAsString() 
                    : (data.has("description") ? data.get("description").getAsString() : "");
            
            // Amount: ∆∞u ti√™n "transferAmount" (SePay real), fallback "amount"
            double amount = data.has("transferAmount") 
                    ? data.get("transferAmount").getAsDouble() 
                    : (data.has("amount") ? data.get("amount").getAsDouble() : 0);
            
            // Transaction ID: ∆∞u ti√™n "id" (SePay real), fallback "tran_id"
            String transactionId = data.has("id") 
                    ? data.get("id").getAsString() 
                    : (data.has("tran_id") ? data.get("tran_id").getAsString() : 
                      (data.has("tid") ? data.get("tid").getAsString() : "UNKNOWN"));

            // Bank: ∆∞u ti√™n "gateway" (SePay real), fallback "bank_name"
            String bank = data.has("gateway") 
                    ? data.get("gateway").getAsString() 
                    : (data.has("bank_name") ? data.get("bank_name").getAsString() : "Unknown Bank");

            System.out.println("üîç DEBUG - Description: " + description);
            System.out.println("üîç DEBUG - Amount: " + amount);
            System.out.println("üîç DEBUG - Transaction ID: " + transactionId);
            System.out.println("üîç DEBUG - Bank: " + bank);

            WalletDAO walletDAO = new WalletDAO();
            int userId = walletDAO.findUserIdByDescription(description);
            
            System.out.println("üîç DEBUG - Parsed User ID: " + userId);

            if (userId == -1) {
                System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y userId trong m√¥ t·∫£: " + description);
                System.out.println("‚ö†Ô∏è Format ƒë√∫ng ph·∫£i l√†: TOPUP-{s·ªë}");
                response.getWriter().write("{\"success\": false, \"message\": \"Invalid description format. Expected: TOPUP-{number}\"}");
                return;
            }

            // Ki·ªÉm tra user t·ªìn t·∫°i
            System.out.println("üîç DEBUG - Checking if user exists...");
            
            // Ki·ªÉm tra wallet t·ªìn t·∫°i
            System.out.println("üîç DEBUG - Processing top up...");
            walletDAO.processTopUp(userId, amount, transactionId, bank);

            System.out.println("‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng: +" + amount + "ƒë cho user_id=" + userId);
            System.out.println("‚úÖ Transaction ID: " + transactionId);
            response.getWriter().write("{\"success\": true, \"message\": \"Deposit success\", \"user_id\": " + userId + ", \"amount\": " + amount + "}");

        } catch (Exception e) {
            System.err.println("‚ùå ERROR in webhook: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(500);
            response.getWriter().write("{\"success\": false, \"message\": \"Server error: " + e.getMessage() + "\"}");
        }
    }
}
